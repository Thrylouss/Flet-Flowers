import flet as ft
import requests
from database import API_BASE_URL


# Функции для изменения данных профиля
def update_username(headers, new_username, current_password):
    """Запрос для изменения логина пользователя"""
    response = requests.post(f"{API_BASE_URL}/auth/users/set_username/", headers=headers,
                             json={
                                 "new_username": new_username,
                                 "current_password": current_password
                             })
    return response.status_code == 204


def update_email(headers, new_email):
    """Запрос для изменения email пользователя"""
    response = requests.patch(f"{API_BASE_URL}/auth/users/me/", headers=headers, json={"email": new_email})
    return response.status_code == 200


def update_password(headers, current_password, new_password):
    """Запрос для изменения пароля пользователя"""
    response = requests.post(f"{API_BASE_URL}/auth/users/set_password/", headers=headers, json={
        "current_password": current_password,
        "new_password": new_password
    })
    return response.status_code == 204


def show_profile_page(page, user, headers):
    """Функция для отображения страницы профиля с возможностью редактирования"""

    page.clean()
    page.title = "Профиль"

    # Переменные для хранения состояния редактирования
    is_editing = False

    # Статичные текстовые поля
    username_text = ft.Text(f"Логин: {user['username']}", size=24, weight="bold")
    email_text = ft.Text(f"Электронная почта: {user['email']}", size=24, weight="bold")

    # Редактируемые поля
    username_field = ft.TextField(value=user['username'], label="Логин", width=300)
    email_field = ft.TextField(value=user['email'], label="Электронная почта", width=300)
    current_password_field = ft.TextField(label="Текущий пароль", password=True, width=300)
    new_password_field = ft.TextField(label="Новый пароль", password=True, width=300)

    # Функция для переключения между режимами редактирования и просмотра
    def toggle_edit_mode(e):
        nonlocal is_editing
        is_editing = not is_editing  # Меняем режим

        if is_editing:
            # Показываем редактируемые поля и кнопку "Сохранить"
            page.clean()
            page.add(
                ft.Column([
                    username_field,
                    email_field,
                    current_password_field,
                    new_password_field,
                    ft.ElevatedButton(text="Сохранить изменения", on_click=save_changes),
                    ft.ElevatedButton(text="Отмена", on_click=toggle_edit_mode),  # Кнопка для отмены изменений
                    ft.ElevatedButton(text="Продукты", on_click=lambda e: page.go("/products")),
                    ft.ElevatedButton(text="Выйти", on_click=lambda e: page.go("/logout"))
                ], width=page.width, spacing=10, alignment="center", horizontal_alignment="center")
            )
        else:
            # Вернуть статичные поля, если отменено
            page.clean()
            page.add(
                ft.Column([
                    username_text,
                    email_text,
                    ft.ElevatedButton(text="Изменить профиль", on_click=toggle_edit_mode),
                    ft.ElevatedButton(text="Продукты", on_click=lambda e: page.go("/products")),
                    ft.ElevatedButton(text="Выйти", on_click=lambda e: page.go("/logout"))
                ], width=page.width, spacing=10, alignment="center", horizontal_alignment="center")
            )
        page.update()

    def save_changes(e):
        """Сохраняем изменения профиля"""
        new_username = username_field.value
        new_email = email_field.value
        current_password = current_password_field.value
        new_password = new_password_field.value

        # Обновляем логин, если изменен
        if new_username != user['username']:
            if update_username(headers, new_username, current_password):
                user['username'] = new_username
                ft.SnackBar(ft.Text("Логин изменен"), bgcolor="green").open = True
            else:
                ft.SnackBar(ft.Text("Не удалось изменить логин"), bgcolor="red").open = True

        # Обновляем email, если изменен
        if new_email != user['email']:
            if update_email(headers, new_email):
                user['email'] = new_email
                ft.SnackBar(ft.Text("Email изменен"), bgcolor="green").open = True
            else:
                ft.SnackBar(ft.Text("Не удалось изменить email"), bgcolor="red").open = True

        # Обновляем пароль, если оба поля заполнены
        if current_password and new_password:
            if update_password(headers, current_password, new_password):
                ft.SnackBar(ft.Text("Пароль изменен"), bgcolor="green").open = True
            else:
                ft.SnackBar(ft.Text("Не удалось изменить пароль"), bgcolor="red").open = True

        # Обновляем текстовые поля после сохранения
        username_text.value = f"Логин: {user['username']}"
        email_text.value = f"Электронная почта: {user['email']}"

        # Возвращаемся к просмотру
        toggle_edit_mode(e)

    # Начальный вид страницы с статичными текстовыми полями
    page.add(
        ft.Column([
            username_text,
            email_text,
            ft.ElevatedButton(text="Изменить профиль", on_click=toggle_edit_mode),
            ft.ElevatedButton(text="Продукты", on_click=lambda e: page.go("/products")),
            ft.ElevatedButton(text="Выйти", on_click=lambda e: page.go("/logout"))
        ], width=page.width, spacing=10, alignment="center", horizontal_alignment="center")
    )

    page.update()
